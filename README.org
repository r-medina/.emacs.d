#+TITLE: emacs config
#+AUTHOR: Ricky Medina
#+DATE: 2020-05-27

After getting to know org-mode, I am starting the process of moving more and
more of my life onto it.

I've had my [[file:../notes/20200526192638-emacs.org][emacs]] config all over the place for the last 10 years, but this is
an attempt to get it documented and in one place.

* General

** Keep the backups in a sane location
   #+begin_src emacs-lisp
   (setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
   (setq backup-by-copying t)
   #+end_src

** And not that I'm writing too much elisp, but just in case
   #+begin_src emacs-lisp
   (add-to-list 'load-path "~/.emacs.d/usr")
   #+end_src

* Packages

  A lot of the following was taken from [[https://github.com/hrs/dotfiles/blob/master/emacs/dot-emacs.d/init.el][this config]].

** Set package repositories
   #+begin_src emacs-lisp
   (require 'package)
   (add-to-list 'package-archives '("gnu" . "https://elpa.gnu.org/packages/") t)
   (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
   (add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/") t)
   (add-to-list 'package-archives '("marmalade" . "http://marmalade-repo.org/packages/") t)
   (package-initialize)
   #+end_src

** The almighty =use-package=:

   This installs it and updates package list just in case

   #+begin_src emacs-lisp
   (when (not (package-installed-p 'use-package))
   (package-refresh-contents)
   (package-install 'use-package))
   #+end_src

*** Configuration to make sure things load properly:

    #+begin_src emacs-lisp
    (require 'use-package-ensure)
    (setq use-package-always-ensure t)

    (use-package auto-compile
    :config (auto-compile-on-load-mode))

    (setq load-prefer-newer t)
    #+end_src

*** Package configurations

    I'm going to keep these all in the same block rather than having a
    bunch of text explaining each one.

    #+begin_src emacs-lisp
    (use-package ace-jump-mode
      :bind
      ("C-." . ace-jump-mode))
    
    ;; (use-package atom-dark-theme ; in el-get
    ;;   :commands (atom-dark atom-dark-theme))
    
    (use-package beacon
      :commands (beacon-mode beacon-blink)
      :config
      (beacon-mode 1)
      :bind
      ("C-c b" . beacon-blink))
    
    ;; (use-package chrome.el ; in el-get
    ;;   :bind
    ;;   (:map chrome-mode-map
    ;; 	("M-r" . chrome-mark-tab)))
    
    (use-package company
      :hook (after-init . global-company-mode)
      :config
      (setq company-idle-delay 1)
      ;; starts completing after a single character instead of 3
      (setq company-minimum-prefix-length 1)
      ;; aligns fields in completions
      (setq company-tooltip-align-annotations t)
      (setq company-global-modes '(not markdown-mode)))
    (use-package company-lsp)
    
    (use-package diff-hl
      :commands diff-hl
      :hook
      (diff-hl-mode . diff-hl-margin-mode)
      (diff-hl-mode . diff-hl-flydiff-mode)
      (magit-pre-refresh . diff-hl-magit-pre-refresh)
      (magit-post-refresh . diff-hl-magit-post-refresh)
      :config
      (global-diff-hl-mode))
    
    (use-package dockerfile-mode)
    
    ;; (use-package emacs-powerline) ;; TODO: am i using this? ;; in el-get
    
    (use-package expand-region) ;; TODO: am i using this?
    
    (use-package flycheck)
    
    (use-package flyspell
      ;; :hook (prog-mode . flyspell-prog-mode)
      )
    
    (use-package forge)
    
    (use-package git-link
      :bind
      ("C-c l" . git-link))
    
    (use-package go-mode
      :init
      (add-to-list 'auto-mode-alist '("\\.go\\'" . go-mode))
      :hook
      (go-mode . 'flycheck-mode)
      (go-mode . 'lsp-deferred))
    ;; (use-package go-mod) ;; el-get
    ;; (use-package go-imports) ;; el-get
    
    (use-package golden-ratio
      :config
      (golden-ratio-mode 1))
    
    (use-package hcl-mode
      :init
      (add-to-list 'auto-mode-alist '("\\.hcl.ctmpl\\'" . hcl-mode)))
    
    (use-package heaven-and-hell
      :hook
      (after-init . heaven-and-hell-init-hook)
      :config
      (setq heaven-and-hell-themes
    	'((light . tango)
    	  (dark . atom-dark)))
      (setq heaven-and-hell-load-theme-no-confirm t))
    
    (use-package helm
      :config
      (helm-mode 1)
      :bind
      (("M-x" . helm-M-x)
       ("C-x C-b" . helm-multi-files)
       ("C-x C-f" . helm-find-files)
       :map helm-find-files-map
       ;; TODO: look into \t vs <tab> vs TAB
       ("<tab>" . 'helm-execute-persistent-action)))
    
    (use-package helm-projectile)
    
    (use-package json-mode) ;; init in el-get
    
    (use-package lsp-mode)
    (use-package lsp-ui)
    
    (use-package magit)
    
    (use-package markdown-mode
      :mode ("\\.md\\'" . markdown-mode))
    
    (use-package org
      :ensure org-plus-contrib
      ;; :commands (org
      ;;            org-capture
      ;;            org-mode
      ;;            org-store-link
      ;;            update-org-hours
      ;;            my-term-agenda
      ;;            dired-notes
      ;;            jump-to-org-agenda)
      :mode ("\\.org\\'" . org-mode)
    
      :config
    
      (setq org-ellipsis "â†©")
      (setq org-todo-keywords
      	'((sequence "TODO" "IN PROGRESS" "WAITING" "|" "DONE")
      	  (sequence "MAYBE")))
      (setq org-directory "~/notes")
      (setq org-agenda-files (list "~/notes"))
      (setq org-tag-alist '(("work" . ?w)
      			("health" . ?h)
      			("family" . ?f)
      			("personal" . ?p)
      			("engineering-success" . ?e)))
      (require 'org-tempo)
    
      (use-package org-bullets
        :hook (org-mode . (lambda () (org-bullets-mode 1))))
      
      :hook
      (org-mode . flyspell-mode))
    
    ;; (use-package org-roam
    ;;   :requires org
    ;;   :pin manual
    ;;   :hook
    ;;   (emacs-startup-hook . org-roam-mode)
    ;;   :bind
    ;;   (("C-c o t" . org-roam-dailies-today)
    ;;    ("C-c o c" . org-roam-capture)
    ;;    ("C-c o f" . org-roam-find-file)
    ;;    :map org-mode-map
    ;;    ("C-c o r" . org-roam)
    ;;    ("C-c o y" . org-roam-dailies-yesterday)
    ;;    ("C-c o m" . org-roam-dailies-tomorrow)
    ;;    ("C-c o d" . org-roam-dailies-date)
    ;;    ("C-c o i" . org-roam-insert))
    ;;   :config
    ;;   (setq org-roam-directory "~/notes")
    ;;   (use-package org-roam-server  
    ;;     :bind
    ;;     (:map org-mode-map
    ;; 	  ;; TODO: update chart
    ;; 	  ("C-c o s" . org-roam-serever-mode))))
    
    (use-package paredit
      :config
      (add-hook 'emacs-lisp-mode-hook #'enable-paredit-mode)
      (add-hook 'eval-expression-minibuffer-setup-hook #'enable-paredit-mode)
      (add-hook 'ielm-mode-hook #'enable-paredit-mode)
      (add-hook 'lisp-mode-hook #'enable-paredit-mode)
      (add-hook 'lisp-interaction-mode-hook #'enable-paredit-mode)
      (add-hook 'scheme-mode-hook #'enable-paredit-mode)
      (add-hook 'javascript-mode-hook #'enable-paredit-mode)
      (add-hook 'clojure-mode-hook #'enable-paredit-mode))
    
    (use-package pbcopy
      :config
      (turn-on-pbcopy)) ;; more in el-get, but don't think i need it
    
    (use-package plantuml-mode)
    
    (use-package protobuf-mode)
    
    (use-package smart-mode-line
      :commands sml/setup
      :init
      (add-hook 'after-init-hook #'sml/setup))
    
    (use-package switch-window
      :bind ("C-x o" . switch-window))
    
    (use-package tramp
      :config
      (setq tramp-default-method "ssh")
      (customize-set-variable 'tramp-syntax 'simplified))
    
    (use-package yaml-mode
      :commands yaml-mode)
    
    (use-package yascroll
      :config
      (global-yascroll-bar-mode))
    
    (use-package yasnippet
      :config
      (yas-global-mode 1)
      :bind
      ("C-c y" . yas-expand))
    #+end_src

